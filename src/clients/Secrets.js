// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import Client from '../Client';

export default class Secrets extends Client {
  constructor(options = {}) {
    super({
      baseUrl: 'https://secrets.taskcluster.net/v1',
      exchangePrefix: '',
      ...options
    });
    this.set.entry = {type:'function',method:'put',route:'/secret/<name>',query:[],args:['name'],name:'set',stability:'stable',scopes:[['secrets:set:<name>']],input:true}; // eslint-disable-line
    this.remove.entry = {type:'function',method:'delete',route:'/secret/<name>',query:[],args:['name'],name:'remove',stability:'stable',scopes:[['secrets:set:<name>']]}; // eslint-disable-line
    this.get.entry = {type:'function',method:'get',route:'/secret/<name>',query:[],args:['name'],name:'get',stability:'stable',scopes:[['secrets:get:<name>']],output:true}; // eslint-disable-line
    this.list.entry = {type:'function',method:'get',route:'/secrets',query:['continuationToken','limit'],args:[],name:'list',stability:'stable',output:true}; // eslint-disable-line
    this.ping.entry = {type:'function',method:'get',route:'/ping',query:[],args:[],name:'ping',stability:'stable'}; // eslint-disable-line
  }

  // Set the secret associated with some key.  If the secret already exists, it is
  // updated instead.
  set(...args) {
    this.validate(this.set.entry, args);
    return this.request(this.set.entry, args);
  }

  // Delete the secret associated with some key.
  remove(...args) {
    this.validate(this.remove.entry, args);
    return this.request(this.remove.entry, args);
  }

  // Read the secret associated with some key.  If the secret has recently
  // expired, the response code 410 is returned.  If the caller lacks the
  // scope necessary to get the secret, the call will fail with a 403 code
  // regardless of whether the secret exists.
  get(...args) {
    this.validate(this.get.entry, args);
    return this.request(this.get.entry, args);
  }

  // List the names of all secrets.
  // By default this end-point will try to return up to 1000 secret names in one
  // request. But it **may return less**, even if more tasks are available.
  // It may also return a `continuationToken` even though there are no more
  // results. However, you can only be sure to have seen all results if you
  // keep calling `listTaskGroup` with the last `continuationToken` until you
  // get a result without a `continuationToken`.
  // If you are not interested in listing all the members at once, you may
  // use the query-string option `limit` to return fewer.
  list(...args) {
    this.validate(this.list.entry, args);
    return this.request(this.list.entry, args);
  }

  // Respond without doing anything.
  // This endpoint is used to check that the service is up.
  ping(...args) {
    this.validate(this.ping.entry, args);
    return this.request(this.ping.entry, args);
  }
}
